'scopeName': 'source.log'
'name': 'Log'
'fileTypes': [
  'txt',
  'log'
]
# Try to fuzzy match a time stamp on first line
'firstLineMatch': '^[0-9]{2}.?[0-9]{2}.?[0-9]{2}.?[0-9]{2}.[0-9]{2}.?[0-9]{2}.+'
'patterns': [
  
  # Time stamp syntax
  {
    'match': '^[0-9.: \-]*?[0-9]{3}:? '
    'name': 'definition.comment.log'
  }
  
  # Android Log syntax
  {
    'match': '.* GC_FOR_ALLOC .*'
    'name': 'variable.parameter.gc-alloc.log'
  }
  {
    'match': '(?=.*?[(][0-9]+[)])([A|E]\/[a-zA-Z].+)'
    'captures':
      '1':
        'name': 'definition.log.log-error'
  }
  {
    'match': 'W\/.+?[0-9][)]'
    'name': 'definition.log.log-warning'
  }
  {
    'match': 'D\/.+?[0-9][)]'
    'name': 'definition.log.log-debug'
  }
  {
    'match': 'I\/.+?[0-9][)]'
    'name': 'definition.log.log-info'
  }
  {
    'match': 'V\/.+?[0-9][)]'
    'name': 'definition.log.log-verbose'
  }
  
  # Nabto log syntax
  {
    'match': '^\#.*'
    'name': ''
  }
  {
    'match': '\{00[0-9a-f]+\}'
    'name': ''
  }
  {
    'match': '\\[[A-Z_]+,(fatal|error)[^:]*'
    'name': 'definition.log.log-error'
  }
  {
    'match': '\\[[A-Z_]+,warn[^:]*'
    'name': 'definition.log.log-warning'
  }
  {
    'match': '\\[[A-Z_]+,info[^:]*'
    'name': 'definition.log.log-info'
  }
  {
    'match': '\\[[A-Z_]+,debug[^:]*'
    'name': 'definition.log.log-debug'
  }
  {
    'match': '\\[[A-Z_]+,(trace|thrd)[^:]*'
    'name': 'definition.log.log-verbose'
  }
  
  # General syntax
  {
    'match': '[ \\[]\/[^ ,]+',
    'name': 'keyword.log'
  }
  {
    'match': ' [a-z]+:\/\/[^ ,]+'
    'name': 'keyword.log'
  }
  {
    'begin': '[\'"]'
    'beginCaptures':
      '0':
        'name': 'definition.string.begin.log'
    'end': '[\'"]'
    'endCaptures':
      '0':
        'name': 'definition.string.end.log'
    'name': 'string.quoted.single.log'
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escape.log'
      }
    ]
  }
]
